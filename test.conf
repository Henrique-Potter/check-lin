# Configuration for creating linearization tests
# Given a history file, creates tests with strong d-hitting schedules to check the linearizability of the input file

# The configuration file parameters might be overwritten by program arguments!

# the type of the schedule enumerator: DHITTING (might add more later)
scheduleEnumerator = "DHITTING"

# depth of d-hitting family of schedules
depth = 2

# input json history file - can be overwritten by the args of the main proc
inputFile = "example/historyLinkedQueue.json"

# class name under test (which the json history file tests)
classUnderTest = "java.util.concurrent.ArrayBlockingQueue<Integer>"
#classUnderTest = "java.util.concurrent.ConcurrentLinkedDeque<Integer>"
#classUnderTest = "java.util.concurrent.ConcurrentLinkedQueue<Integer>"
#classUnderTest = "java.util.concurrent.ConcurrentHashMap<Integer, Integer>"
#classUnderTest = "java.util.concurrent.ConcurrentSkipListMap<Integer, Integer>"
#classUnderTest = "java.util.concurrent.ConcurrentSkipListSet<Integer>"
#classUnderTest = "java.util.concurrent.LinkedBlockingDeque<Integer>"
#classUnderTest = "java.util.concurrent.LinkedBlockingQueue<Integer>"
#classUnderTest = "java.util.concurrent.LinkedTransferQueue<Integer>"
#classUnderTest = "java.util.concurrent.PriorityBlockingQueue<Integer>"

## For the test class to be generated:

# package name for the generated test class
generatedPckName = "produced.test"

# class name for the generated test class - can be overwritten by the args of the main proc
generatedClassName = "Tester"

# libraries to import in the generated test files
imports = ["java.util.concurrent.ArrayBlockingQueue"]
#imports = ["java.util.concurrent.ConcurrentLinkedDeque"]
#imports = ["java.util.concurrent.ConcurrentLinkedQueue"]
#imports = ["java.util.concurrent.ConcurrentHashMap"]
#imports = ["java.util.concurrent.ConcurrentSkipListSet"]
#imports = ["java.util.concurrent.ConcurrentSkipListMap"]
#imports = ["java.util.concurrent.LinkedBlockingDeque"]
#imports = ["java.util.concurrent.LinkedBlockingQueue"]
#imports = ["java.util.concurrent.LinkedTransferQueue"]
#imports = ["java.util.concurrent.PriorityBlockingQueue"]

# name of the tested object
testedVarName = "mObject"

# type of the tested object
testedVarType = "java.util.concurrent.ArrayBlockingQueue<Integer>"
#testedVarType = "java.util.concurrent.ConcurrentLinkedDeque<Integer>"
#testedVarType = "java.util.concurrent.ConcurrentLinkedQueue<Integer>"
#testedVarType = "java.util.concurrent.ConcurrentHashMap<Integer, Integer>"
#testedVarType = "java.util.concurrent.ConcurrentSkipListMap<Integer, Integer>"
#testedVarType = "java.util.concurrent.ConcurrentSkipListSet<Integer>"
#testedVarType = "java.util.concurrent.LinkedBlockingDeque<Integer>"
#testedVarType = "java.util.concurrent.LinkedBlockingQueue<Integer>"
#testedVarType = "java.util.concurrent.PriorityBlockingQueue<Integer>"
#testedVarType = "java.util.concurrent.LinkedTransferQueue<Integer>"

# prefix of the test method names
testedMethodPrefix = "testSchedule"

# collection parameter type (param to putAll, etc)
collParamType = "java.util.concurrent.ArrayBlockingQueue<Integer>"
#collParamType = "java.util.concurrent.ConcurrentLinkedDeque<Integer>"
#collParamType = "java.util.concurrent.ConcurrentLinkedQueue<Integer>"
#collParamType = "java.util.concurrent.ConcurrentHashMap<Integer, Integer>"
#collParamType = "java.util.concurrent.ConcurrentSkipListMap<Integer, Integer>"
#collParamType = "java.util.concurrent.ConcurrentSkipListSet<Integer>"
#collParamType = "java.util.concurrent.LinkedBlockingDeque<Integer>"
#collParamType = "java.util.concurrent.LinkedBlockingQueue<Integer>"
#collParamType = "java.util.concurrent.PriorityBlockingQueue<Integer>"
#collParamType = "java.util.concurrent.LinkedTransferQueue<Integer>"

# collection parameter name
collParamName = "paramColl"

# collection parameter method to add values
collParamMethod = "add"
#collParamMethod = "put"

# the name of the stats directory
statsDirName = "stats"

# the name of the stats file
statsFileName = "Stat"

# print the generated schedules in the stat file?
printSchedulesInStats = "false"

# print the tested schedules in the generated files?
printSchedulesInTests = "false"

